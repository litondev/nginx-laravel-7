
worker_processes  1;

events {
    worker_connections  1024;
}

http {
	### CACHE ###
    open_file_cache max=7000 inactive=10m;
	# Parameter max untuk menentukan jumlah maximum dari cache dan akan expired selama 10 menit.
	
    open_file_cache_valid 10m;
	# Mengizinkan nginx untuk memvalidasi cache setiap 10 menit.
    open_file_cache_min_uses 1;
	
	# Berapa user mengakses setelah itu di cache.
	
    open_file_cache_errors on;
	# Cache setiap http error seperti 404 (not found). Jika nginx berada pada load balancer server sangat tidak dianjurkan.
	### CACHE ### 
	
	server {
		listen 8000;
		server_name localhost;
		root html;
		index index.html;
                # disabled information server
                # server_token off;			
		
		### CACHE AKTIF ### 
		location Ëœ*\.(css|map|js|json|xml)$ {
			root /opt/nginx/html/;
			expires 5m;
			#  Option untuk seberapa lama cache akan di simpan.
			
			add_header Cache-Control "public";
			# Jika kita set sebagai public maka cache akan aktif jika di akses melalui browser, curl ataupun aplikasi http lainnya. Sedangkan private cache control hanya aktif jika di akses melalui browse
		}
		### CACHE ###
	
		# check document root 
		location /check-root { 
                        # aktivated auth to this page
                        # auth_basic "Authentication required";
                        # auth_basic_user_file /folder/.nginxusers;
			root html;
			return 200 $document_root;
		}
		
		# check request uri
		location /check-request-uri {
			return 200 $request_uri;
		}
		
		# check http
		location /check-http {
			return 200 $scheme;
		}
		
		# check last uri segment
		location /last/uri/segment {					
		    if ($request_uri ~* "([^/]*$)" ) {
			  set $last_path_component  $1;
     	    }
			
			return 200 $last_path_component;
		}
		
		# set variable 
		location /set-variable {
			set $hello "hello";
			return 200 "${hello} liton";
		}
		
		## CHECK ALL VARIABLE HERE
		# http://nginx.org/en/docs/varindex.html

		
			
		### 
		# location /he (PENTING /he beda dengan ~/he dan he) =>
		# akan coco degan /he-asal atau /hello dan pokokmen yang berawaln dengan he apapun kondisi di belakangnya
		###
		
		# ~ = berarti mengunakan case sensitive dan regular expression beda jika tidak mengunakan ~ (beda dengan /he dan he saja)
		# location ~/he {
			# return 200 "he with ~";
		# }				
		
		# ~* = berarti mengunakan incase sensitive dan regular expression beda jika tidak mengunakan ~ (beda dengan /he dan he saja)
		# location ~*/he {
			# return 200 "he with ~";
		# }		
		
		# http://localhost:8000/angka[0-9] 
		# => berhasil di access dengan cara ini
		location /angka[0-9]{
			return 404 angka[0-9];
		}
			
		# http://localhost:8000/angka22
		# => berhasil di acces dengan cara ini 
		location ~/angka[0-9]{
			return 200 angka;
		}
		
		# script di bawa ini berati mengunaan tilda tetapi regular expression tidak akan di jalankan terlebih dahulu
		location ^~ /filesinfo {
            return 200 "This is an example standard block, but more important than regex";
		}
	
		# hanya akan cocok /go bukan /go-lain-lain atau /gok
	    location = /go {
          return 200 "Stop go";
		}
				
		# WARING ENTAH KENAPA NGAK BISA JALAN MUNGKIN HARUS MENGUNAKN REDIRECT ATO TRY
		location /hello {
			root html;					
			index index.html;
		}
		
		# return redirect akan cocok dengan /img/gambar.png atau /img/buku.jpeg
		location ~*/img/(.*)$ {		
            return 301 /go;
		}
		
		# penggunaan error_page jika di akses akan redirect ke /go
		location /error-404{
			error_page 404 /go;
		}
		
		location /datas {		  			
		   # try files *param1 param2 param3 param4 *param-terakhir
		   # *param1 adalah tempat untuk mencockan 
		     # /datas/info
			 # /datas/html
		   # param2,param3,param5 adalah yang akan di cocokan
		     # index.html,index 
			 # info.txt,info
		   # setiap *param-terakhir adalah fallback jika tidak ditemukan param2,param3,param4 maka akan di ekeskusi
		     # =404
			 
		   # akan cocok dengan 
		   # => localhost:8000/datas/info.txt
		   # => localhost:8000/datas/info
		   try_files $uri $uri.html $uri.txt =404;		           
		   
		   # return 200 "try_files ${uri} ${uri}.html ${uri}.txt";
		}
	}
}
